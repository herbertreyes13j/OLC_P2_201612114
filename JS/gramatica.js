/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,39],$V2=[1,40],$V3=[1,41],$V4=[1,42],$V5=[1,26],$V6=[1,23],$V7=[1,24],$V8=[1,25],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[5,24,29,30,31,32,33,40,42,43,44,45,46,51,55,57,58,59,60,61,62,64,69,70,71],$Vm=[1,49],$Vn=[33,34],$Vo=[2,28],$Vp=[1,54],$Vq=[1,67],$Vr=[1,80],$Vs=[1,75],$Vt=[1,65],$Vu=[1,66],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,74],$VC=[1,78],$VD=[5,24,26,29,30,31,32,33,40,42,43,44,45,46,51,55,57,58,59,60,61,62,64,69,70,71],$VE=[26,37,38],$VF=[1,98],$VG=[1,97],$VH=[5,24,29,30,31,32,33,40,42,43,44,45,46,50,51,55,57,58,59,60,61,62,64,69,70,71,72],$VI=[1,105],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[1,110],$VO=[1,111],$VP=[1,112],$VQ=[1,113],$VR=[1,114],$VS=[1,115],$VT=[1,116],$VU=[1,117],$VV=[1,118],$VW=[1,119],$VX=[1,120],$VY=[26,35,37,45,48,56,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93],$VZ=[1,143],$V_=[26,48],$V$=[26,35,37,45,48,56,77,78,83,84,85,86,87,88,89,90,91,93],$V01=[1,174],$V11=[26,45],$V21=[1,188],$V31=[26,35,37,45,48,56,77,78,79,80,82,83,84,85,86,87,88,89,90,91,93],$V41=[26,35,37,45,48,56,83,84,85,90,91,93],$V51=[26,35,37,45,48,56,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93],$V61=[1,215],$V71=[26,35,37,45,48,56],$V81=[45,55,57],$V91=[5,24,29,30,31,32,33,40,42,43,44,45,46,50,51,55,57,58,59,60,61,62,64,69,70,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"IMPORT":7,"DECLARACION_1":8,"DECLARACION_2":9,"ASIGNACION":10,"BLOQUE":11,"IF":12,"SWITCH":13,"BREAK":14,"WHILE":15,"DO_WHILE":16,"CONTINUE":17,"RETURN":18,"FUNCION":19,"LLAMADA":20,"PRINT":21,"THROW":22,"TRY_CATCH":23,"Tok_import":24,"L_NOMBRES":25,"Tok_coma":26,"Tok_Nombre":27,"TIPO":28,"Tok_integer":29,"Tok_char":30,"Tok_double":31,"Tok_boolean":32,"Tok_ID":33,"Tok_cor1":34,"Tok_cor2":35,"ID_LIST":36,"Tok_pyc":37,"Tok_asigna1":38,"EXP":39,"Tok_var":40,"Tok_asigna2":41,"Tok_const":42,"Tok_global":43,"Tok_llav1":44,"Tok_llav2":45,"Tok_if":46,"Tok_par1":47,"Tok_par2":48,"ELIF":49,"Tok_else":50,"Tok_switch":51,"CASOS":52,"DEFAULT":53,"CASO":54,"Tok_case":55,"Tok_bipunto":56,"Tok_default":57,"Tok_break":58,"Tok_while":59,"Tok_do":60,"Tok_continue":61,"Tok_return":62,"PARAMETROS":63,"Tok_void":64,"PARAMETRO":65,"L_LLAMADA":66,"P_LLAMADA":67,"Tok_dolar":68,"Tok_print":69,"Tok_throw":70,"Tok_try":71,"Tok_catch":72,"ACCESOS":73,"Tok_punto":74,"LACCESOS":75,"ACCESO":76,"Tok_mas":77,"Tok_menos":78,"Tok_por":79,"Tok_div":80,"Tok_pot":81,"Tok_mod":82,"Tok_diferente":83,"Tok_igual":84,"Tok_igualr":85,"Tok_mayor":86,"Tok_menor":87,"Tok_mayori":88,"Tok_menori":89,"Tok_and":90,"Tok_or":91,"Tok_not":92,"Tok_xor":93,"Tok_inc":94,"Tok_dec":95,"Tok_string":96,"Tok_entero":97,"Tok_doble":98,"Tok_caracter":99,"Tok_true":100,"Tok_false":101,"Tok_null":102,"Tok_strc":103,"LISTA":104,"ELEMENTOS":105,"TERNARIO":106,"Tok_pre":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",24:"Tok_import",26:"Tok_coma",27:"Tok_Nombre",29:"Tok_integer",30:"Tok_char",31:"Tok_double",32:"Tok_boolean",33:"Tok_ID",34:"Tok_cor1",35:"Tok_cor2",37:"Tok_pyc",38:"Tok_asigna1",40:"Tok_var",41:"Tok_asigna2",42:"Tok_const",43:"Tok_global",44:"Tok_llav1",45:"Tok_llav2",46:"Tok_if",47:"Tok_par1",48:"Tok_par2",50:"Tok_else",51:"Tok_switch",55:"Tok_case",56:"Tok_bipunto",57:"Tok_default",58:"Tok_break",59:"Tok_while",60:"Tok_do",61:"Tok_continue",62:"Tok_return",64:"Tok_void",68:"Tok_dolar",69:"Tok_print",70:"Tok_throw",71:"Tok_try",72:"Tok_catch",74:"Tok_punto",77:"Tok_mas",78:"Tok_menos",79:"Tok_por",80:"Tok_div",81:"Tok_pot",82:"Tok_mod",83:"Tok_diferente",84:"Tok_igual",85:"Tok_igualr",86:"Tok_mayor",87:"Tok_menor",88:"Tok_mayori",89:"Tok_menori",90:"Tok_and",91:"Tok_or",92:"Tok_not",93:"Tok_xor",94:"Tok_inc",95:"Tok_dec",96:"Tok_string",97:"Tok_entero",98:"Tok_doble",99:"Tok_caracter",100:"Tok_true",101:"Tok_false",102:"Tok_null",103:"Tok_strc",107:"Tok_pre"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,2],[25,3],[25,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,3],[36,3],[36,1],[8,3],[8,5],[9,5],[9,5],[9,5],[10,4],[11,3],[11,2],[12,5],[12,6],[12,7],[49,7],[49,6],[49,3],[13,7],[13,8],[52,2],[52,1],[54,4],[53,3],[14,2],[15,5],[16,7],[17,2],[18,3],[18,2],[19,6],[19,6],[63,3],[63,1],[65,2],[20,5],[66,3],[66,1],[67,2],[67,1],[67,3],[21,5],[21,4],[22,3],[23,8],[73,3],[75,3],[75,1],[76,1],[76,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,2],[39,3],[39,2],[39,2],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,3],[39,4],[39,4],[39,4],[39,1],[39,1],[39,5],[39,1],[104,3],[105,3],[105,1],[106,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
$$[$0-1].addChilds($$[$0]); this.$=$$[$0-1];
break;
case 3:
this.$= new AST_Node("SENTENCIAS","SENTENCIAS");
                      this.$.addChilds($$[$0]);
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20:
this.$=$$[$0]
break;
case 21:
this.$= new AST_Node("IMPORT","IMPORT"); this.$.addChilds($$[$0])
break;
case 22:
$$[$0-2].addChilds(new AST_Node("NOMBRE",$$[$0])); this.$=$$[$0-2];
break;
case 23:
this.$= new AST_Node("NOMBRES","NOMBRES");
                        this.$.addChilds(new AST_Node("NOMBRE",$$[$0]));
break;
case 24:
this.$=new AST_Node("TIPO","integer");
break;
case 25:
this.$=new AST_Node("TIPO","char");
break;
case 26:
this.$=new AST_Node("TIPO","double");
break;
case 27:
this.$=new AST_Node("TIPO","boolean");
break;
case 28:
this.$=new AST_Node("TIPO",$$[$0]);
break;
case 29:
this.$=new AST_Node("ARREGLO",$$[$0-2]);
break;
case 30:
$$[$0-2].addChilds(new AST_Node("ID",$$[$0])); this.$=$$[$0-2];
break;
case 31:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addChilds(new AST_Node("ID",$$[$0]))
break;
case 32:
this.$= new AST_Node("DECLARACION5","DECLARACION5"); this.$.addChilds($$[$0-2],$$[$0-1])
break;
case 33:
this.$=new AST_Node("DECLARACION1","DECLARACION1"); this.$.addChilds($$[$0-4],$$[$0-3],$$[$0-1]);
break;
case 34:
this.$=new AST_Node("DECLARACION2","DECLARACION2"); this.$.addChilds($$[$0-3],$$[$0-1]);
break;
case 35:
this.$=new AST_Node("DECLARACION3","DECLARACION3"); this.$.addChilds($$[$0-3],$$[$0-1]);
break;
case 36:
this.$=new AST_Node("DECLARACION4","DECLARACION4"); this.$.addChilds($$[$0-3],$$[$0-1]);
break;
case 37:
this.$=new AST_Node("ASIGNACION1","ASIGNACION1"); this.$.addChilds($$[$0-3],$$[$0-1]);
break;
case 38:
this.$= new AST_Node("BLOQUE","BLOQUE"); this.$.addChilds($$[$0-1])
break;
case 39:
this.$= new AST_Node("BLOQUE","BLOQUE");
break;
case 40:
this.$= new AST_Node("IF","IF");this.$.addChilds($$[$0-2],$$[$0])
break;
case 41:
this.$= new AST_Node("IF","IF"); this.$.addChilds($$[$0-3],$$[$0-1],$$[$0]);
break;
case 42:
this.$= new AST_Node("IF","IF"); var aux = new AST_Node("ELSE","ELSE"); aux.addChilds($$[$0]);this.$.addChilds($$[$0-4],$$[$0-2],aux)
break;
case 43:
var aux = new AST_Node("ELIF","ELIF");aux.addChilds($$[$0-2],$$[$0]);$$[$0-6].addChilds(aux);this.$=$$[$0-6];
break;
case 44:
this.$ = new AST_Node("ELIF","ELIF");var aux2 = new AST_Node("ELIF","ELIF");aux2.addChilds($$[$0-2],$$[$0]);this.$.addChilds(aux2)
break;
case 45:
var aux = new AST_Node("ELSE","ELSE");aux.addChilds($$[$0]); $$[$0-2].addChilds(aux);this.$=$$[$0-2];
break;
case 46:
this.$= new AST_Node("SWITCH","SWITCH");this.$.addChilds($$[$0-4],$$[$0-1])
break;
case 47:
this.$= new AST_Node("SWITCH","SWITCH");this.$.addChilds($$[$0-5],$$[$0-2],$$[$0-1])
break;
case 48:
$$[$0-1].addChilds($$[$0]);this.$=$$[$0-1];
break;
case 49:
this.$=new AST_Node("CASOS","CASOS");this.$.addChilds($$[$0]);
break;
case 50:
this.$= new AST_Node("CASO","CASO"); this.$.addChilds($$[$0-2],$$[$0]);
break;
case 51:
this.$=new AST_Node("DEFAULT","DEFAULT");this.$.addChilds($$[$0]);
break;
case 52:
this.$=new AST_Node("BREAK","BREAK")
break;
case 53:
this.$=new AST_Node("WHILE","WHILE"); this.$.addChilds($$[$0-2],$$[$0])
break;
case 54:
this.$=new AST_Node("DO_WHILE","DO_WHILE");this.$.addChilds($$[$0-5],$$[$0-2])
break;
case 55:
this.$= new AST_Node("CONTINUE","CONTINUE")
break;
case 56:
this.$= new AST_Node("RETURN","RETURN");this.$.addChilds($$[$0-1])
break;
case 57:
this.$= new AST_Node("RETURN","RETURN")
break;
case 58:
this.$=new AST_Node("FUNCION","FUNCION");this.$.addChilds($$[$0-5],new AST_Node("id",$$[$0-4]),$$[$0-2],$$[$0]);
break;
case 59:
this.$=new AST_Node("FUNCION","FUNCION");this.$.addChilds(new AST_Node("TIPO",$$[$0-5]),new AST_Node("id",$$[$0-4]),$$[$0-2],$$[$0]);
break;
case 60:
$$[$0-2].addChilds($$[$0]);this.$=$$[$0-2];
break;
case 61:
this.$=new AST_Node("PARAMETROS","PARAMETROS");this.$.addChilds($$[$0]);
break;
case 62:
this.$=new AST_Node("PARAMETRO","PARAMETRO");this.$.addChilds($$[$0-1],$$[$0])
break;
case 78: case 79: case 80: case 81: case 82: case 83: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 95:
this.$= new AST_Node("EXP","EXP");this.$.addChilds($$[$0-2],new AST_Node("op",$$[$0-1]),$$[$0]);
break;
case 84: case 94:
this.$= new AST_Node("EXP","EXP");this.$.addChilds(new AST_Node("op",$$[$0-1]),$$[$0]);
break;
case 96: case 97:
this.$= new AST_Node("EXP","EXP");this.$.addChilds(new AST_Node("Tok_string",$$[$0-1]),new AST_Node("op",$$[$0]));
break;
case 98:
this.$= new AST_Node("EXP","EXP");this.$.addChilds(new AST_Node("Tok_string",$$[$0]));
break;
case 99:
this.$= new AST_Node("EXP","EXP");this.$.addChilds(new AST_Node("integer",$$[$0]));
break;
case 100:
this.$= new AST_Node("EXP","EXP");this.$.addChilds(new AST_Node("double",$$[$0]));
break;
case 101:
this.$= new AST_Node("EXP","EXP");this.$.addChilds(new AST_Node("char",$$[$0]));
break;
case 102:
this.$= new AST_Node("EXP","EXP");this.$.addChilds(new AST_Node("true",$$[$0]));
break;
case 103:
this.$= new AST_Node("EXP","EXP");this.$.addChilds(new AST_Node("false",$$[$0]));
break;
case 104:
this.$= new AST_Node("EXP","EXP");this.$.addChilds(new AST_Node("null",$$[$0]));
break;
case 105:
this.$= new AST_Node("EXP","EXP");this.$.addChilds(new AST_Node("id",$$[$0]));
break;
case 106:
this.$=$$[$0-1]
break;
case 107: case 108: case 109:
this.$= new AST_Node("EXP","EXP");var aux=new AST_Node("CASTEO","CASTEO"); aux.addChilds(new AST_Node("TIPO",$$[$0-2]),$$[$0]); this.$.addChilds(aux);
break;
case 110: case 111:
this.$= new AST_Node("EXP","EXP");this.$.addChilds($$[$0])
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,28:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,40:$V6,42:$V7,43:$V8,44:$V9,46:$Va,51:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,64:$Vh,69:$Vi,70:$Vj,71:$Vk},{1:[3]},{5:[1,43],6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,28:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,40:$V6,42:$V7,43:$V8,44:$V9,46:$Va,51:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,64:$Vh,69:$Vi,70:$Vj,71:$Vk},o($Vl,[2,3]),o($Vl,[2,4]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),o($Vl,[2,12]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),o($Vl,[2,18]),o($Vl,[2,19]),o($Vl,[2,20]),{25:45,27:[1,46]},{33:[1,48],34:$Vm,36:47},{33:[1,50]},{33:[1,51]},{33:[1,52]},o($Vn,$Vo,{38:[1,53],47:$Vp}),{4:55,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,28:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,40:$V6,42:$V7,43:$V8,44:$V9,45:[1,56],46:$Va,51:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,64:$Vh,69:$Vi,70:$Vj,71:$Vk},{47:[1,57]},{47:[1,58]},{37:[1,59]},{47:[1,60]},{11:61,44:$V9},{37:[1,62]},{20:76,33:$Vq,37:[1,64],39:63,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{33:[1,81]},{47:[1,82]},{20:76,33:$Vq,39:83,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{11:84,44:$V9},o($Vn,[2,24]),o($Vn,[2,25]),o($Vn,[2,26]),o($Vn,[2,27]),{1:[2,1]},o($Vl,[2,2]),o($Vl,[2,21],{26:[1,85]}),o($VD,[2,23]),{26:[1,88],37:[1,86],38:[1,87]},o($VE,[2,31],{47:[1,89]}),{35:[1,90]},{41:[1,91]},{41:[1,92]},{41:[1,93]},{20:76,33:$Vq,39:94,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{33:$VF,66:95,67:96,68:$VG},{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,28:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,40:$V6,42:$V7,43:$V8,44:$V9,45:[1,99],46:$Va,51:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,64:$Vh,69:$Vi,70:$Vj,71:$Vk},o($VH,[2,39]),{20:76,33:$Vq,39:100,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:101,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},o($Vl,[2,52]),{20:76,33:$Vq,39:102,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{59:[1,103]},o($Vl,[2,55]),{37:[1,104],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},o($Vl,[2,57]),{20:76,33:$Vq,39:121,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:122,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},o($VY,[2,105],{47:$Vp,74:[1,125],94:[1,123],95:[1,124]}),o($VY,[2,98]),o($VY,[2,99]),o($VY,[2,100]),o($VY,[2,101]),o($VY,[2,102]),o($VY,[2,103]),o($VY,[2,104]),{20:76,29:[1,128],30:[1,127],31:[1,129],33:$Vq,39:126,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},o($VY,[2,110]),o($VY,[2,111]),{33:[1,130]},o($VY,[2,113]),{20:76,33:$Vq,39:132,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79,105:131},{47:[1,133]},{20:76,33:$Vq,39:134,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{37:[1,135],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{72:[1,136]},{27:[1,137]},o($Vl,[2,32]),{20:76,33:$Vq,39:138,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{33:[1,139]},{28:142,29:$V1,30:$V2,31:$V3,32:$V4,33:$VZ,63:140,65:141},o($Vn,[2,29]),{20:76,33:$Vq,39:144,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:145,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:146,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{37:[1,147],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{26:[1,149],48:[1,148]},o($V_,[2,65]),{33:[1,150]},o($V_,[2,67],{38:[1,151]}),o($VH,[2,38]),{48:[1,152],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{48:[1,153],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{48:[1,154],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{47:[1,155]},o($Vl,[2,56]),{20:76,33:$Vq,39:156,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:157,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:158,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:159,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:160,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:161,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:162,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:163,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:164,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:165,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:166,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:167,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:168,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:169,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:170,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:171,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},o($V$,[2,84],{79:$VK,80:$VL,81:$VM,82:$VN}),o($VY,[2,94]),o($VY,[2,96]),o($VY,[2,97]),{20:175,33:$V01,75:172,76:173},{48:[1,176],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{48:[1,177]},{48:[1,178]},{48:[1,179]},{34:[1,180]},{26:[1,182],45:[1,181]},o($V11,[2,116],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX}),{28:142,29:$V1,30:$V2,31:$V3,32:$V4,33:$VZ,63:183,65:141},{48:[1,184],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},o($Vl,[2,71]),{47:[1,185]},o($VD,[2,22]),{37:[1,186],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},o($VE,[2,30]),{26:$V21,48:[1,187]},o($V_,[2,61]),{33:[1,189],34:$Vm},o($Vn,$Vo),{37:[1,190],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{37:[1,191],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{37:[1,192],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},o($Vl,[2,37]),{37:[1,193]},{33:$VF,67:194,68:$VG},o($V_,[2,66]),{20:76,33:$Vq,39:195,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{11:196,44:$V9},{44:[1,197]},{11:198,44:$V9},{20:76,33:$Vq,39:199,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},o($V$,[2,78],{79:$VK,80:$VL,81:$VM,82:$VN}),o($V$,[2,79],{79:$VK,80:$VL,81:$VM,82:$VN}),o($V31,[2,80],{81:$VM}),o($V31,[2,81],{81:$VM}),o($V31,[2,82],{81:$VM}),o($V31,[2,83],{81:$VM}),o($V41,[2,85],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,86:$VR,87:$VS,88:$VT,89:$VU}),o($V41,[2,86],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,86:$VR,87:$VS,88:$VT,89:$VU}),o($V41,[2,87],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,86:$VR,87:$VS,88:$VT,89:$VU}),o($V41,[2,88],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o($V41,[2,89],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o($V41,[2,90],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o($V41,[2,91],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN}),o([26,35,37,45,48,56,90,91,93],[2,92],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU}),o([26,35,37,45,48,56,91,93],[2,93],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV}),o([26,35,37,45,48,56,93],[2,95],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW}),o($VY,[2,73],{74:[1,200]}),o($V51,[2,75]),o($V51,[2,76],{47:$Vp}),o($V51,[2,77]),o($VY,[2,106]),{20:76,33:$Vq,39:201,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:202,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:203,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{20:76,33:$Vq,39:204,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},o($VY,[2,114]),{20:76,33:$Vq,39:205,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{26:$V21,48:[1,206]},o($Vl,[2,70],{37:[1,207]}),{33:[1,208]},o($Vl,[2,33]),{11:209,44:$V9},{28:142,29:$V1,30:$V2,31:$V3,32:$V4,33:$VZ,65:210},o($V_,[2,62]),o($Vl,[2,34]),o($Vl,[2,35]),o($Vl,[2,36]),o([5,24,26,29,30,31,32,33,35,37,40,42,43,44,45,46,48,51,55,56,57,58,59,60,61,62,64,69,70,71,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,93],[2,63]),o($V_,[2,64]),o($V_,[2,68],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX}),o($Vl,[2,40],{49:211,50:[1,212]}),{52:213,54:214,55:$V61},o($Vl,[2,53]),{48:[1,216],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{20:175,33:$V01,76:217},o($V71,[2,107],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX}),o($V71,[2,108],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX}),o($V71,[2,109],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX}),{35:[1,218],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},o($V11,[2,115],{77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX}),{11:219,44:$V9},o($Vl,[2,69]),{33:[1,220]},o($Vl,[2,58]),o($V_,[2,60]),o($Vl,[2,41],{50:[1,221]}),{11:222,44:$V9,46:[1,223]},{45:[1,224],53:225,54:226,55:$V61,57:[1,227]},o($V81,[2,49]),{20:76,33:$Vq,39:228,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{37:[1,229]},o($V51,[2,74]),o($VY,[2,112]),o($Vl,[2,59]),{48:[1,230]},{11:232,44:$V9,46:[1,231]},o($Vl,[2,42]),{47:[1,233]},o($Vl,[2,46]),{45:[1,234]},o($V81,[2,48]),{56:[1,235]},{56:[1,236],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},o($Vl,[2,54]),{11:237,44:$V9},{47:[1,238]},o($V91,[2,45]),{20:76,33:$Vq,39:239,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},o($Vl,[2,47]),{4:240,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,28:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,40:$V6,42:$V7,43:$V8,44:$V9,46:$Va,51:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,64:$Vh,69:$Vi,70:$Vj,71:$Vk},{4:241,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,28:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,40:$V6,42:$V7,43:$V8,44:$V9,46:$Va,51:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,64:$Vh,69:$Vi,70:$Vj,71:$Vk},o($Vl,[2,72]),{20:76,33:$Vq,39:242,44:$Vr,47:$Vs,73:77,78:$Vt,92:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:79},{48:[1,243],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,28:22,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,40:$V6,42:$V7,43:$V8,44:$V9,45:[2,51],46:$Va,51:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,64:$Vh,69:$Vi,70:$Vj,71:$Vk},o($V81,[2,50],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,28:22,6:44,24:$V0,29:$V1,30:$V2,31:$V3,32:$V4,33:$V5,40:$V6,42:$V7,43:$V8,44:$V9,46:$Va,51:$Vb,58:$Vc,59:$Vd,60:$Ve,61:$Vf,62:$Vg,64:$Vh,69:$Vi,70:$Vj,71:$Vk}),{48:[1,244],77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,93:$VX},{11:245,44:$V9},{11:246,44:$V9},o($V91,[2,44]),o($V91,[2,43])],
defaultActions: {43:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



function AST_Node(tag, value){

    this.tag = tag;
    this.value = value;

    this.childs = [];

    this.addChilds = addChilds;
    this.getSon = getSon;

    function addChilds(){
        for (var i = 0; i < arguments.length; i++) {
            this.childs.push(arguments[i]);
            if (arguments[i]!== null){
                arguments[i].padre = this;
            }
        }
    }  

    function getSon(pos){
        if(pos > this.hijos.length - 1) return null;
        return this.hijos[pos];
    }
 };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 102 
break;
case 4:return 24 
break;
case 5:return 100
break;
case 6:return 51
break;
case 7:return 61 
break;
case 8:return 'Tok_private' 
break;
case 9:return 'Tok_define' 
break;
case 10:return 71
break;
case 11:return 29 
break;
case 12:return 32 
break;
case 13:return 40
break;
case 14:return 101
break;
case 15:return 55 
break;
case 16:return 62
break;
case 17:return 64
break;
case 18:return 'Tok_as' 
break;
case 19:return 72
break;
case 20:return 31
break;
case 21:return 42 
break;
case 22:return 46
break;
case 23:return 57 
break;
case 24:return 69 
break;
case 25:return 'Tok_for' 
break;
case 26:return 103 
break;
case 27:return 70
break;
case 28:return 30 
break;
case 29:return 43 
break;
case 30:return 50 
break;
case 31:return 58 
break;
case 32:return 'Tok_public' 
break;
case 33:return 59 
break;
case 34:return 60
break;
case 35:return 37
break;
case 36:return 74
break;
case 37:return 26
break;
case 38:return 38
break;
case 39:return 41
break;
case 40:return 34
break;
case 41:return 35
break;
case 42:return 47
break;
case 43:return 48
break;
case 44:return 44
break;
case 45:return 45
break;
case 46:return 78
break;
case 47:return 92
break;
case 48:return 81
break;
case 49:return 79
break;
case 50:return 80
break;
case 51:return 82
break;
case 52:return 77
break;
case 53:return 86
break;
case 54:return 87
break;
case 55:return 88
break;
case 56:return 89
break;
case 57:return 84
break;
case 58:return 85
break;
case 59:return 83
break;
case 60:return 90
break;
case 61:return 91
break;
case 62:return 93
break;
case 63:return 94
break;
case 64:return 95
break;
case 65:return 107
break;
case 66:return 56
break;
case 67:return 68
break;
case 68: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 96; 
break;
case 69:return 98;
break;
case 70:return 97;
break;
case 71:return 27;
break;
case 72:return 33;
break;
case 73:return 99;
break;
case 74:return 5;
break;
case 75: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                          L_Error.getInstance().insertar(new N_Error("Lexico",yy_.yytext,"",""));
                                          return null; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:import\b)/i,/^(?:true\b)/i,/^(?:switch\b)/i,/^(?:continue\b)/i,/^(?:private\b)/i,/^(?:define\b)/i,/^(?:try\b)/i,/^(?:integer\b)/i,/^(?:boolean\b)/i,/^(?:var\b)/i,/^(?:false\b)/i,/^(?:case\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:as\b)/i,/^(?:catch\b)/i,/^(?:double\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:default\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:strc\b)/i,/^(?:throw\b)/i,/^(?:char\b)/i,/^(?:global\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:public\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:=)/i,/^(?::=)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:-)/i,/^(?:!)/i,/^(?:\^\^)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\+)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:===)/i,/^(?:!=)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\$)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9"-"]*\.j\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:'.')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}